================================================================================
                    BMAD COMMANDS QUICK REFERENCE
                        Nika Appliance Repair
================================================================================

TESTING COMMANDS
================================================================================

# Test single page (SEO)
python tools/seo-checker.py index.html
python tools/seo-checker.py services/refrigerator-repair.html
python tools/seo-checker.py locations/toronto.html

# Test single page (Data Consistency)
python tools/data-consistency-checker.py index.html
python tools/data-consistency-checker.py services/washer-repair.html

# Test all 62 pages at once (5 minutes)
python tools/mass-test-all-pages.py

# Test responsive design (requires live server)
python tools/test-actual-scroll.py index.html

# Test visual design (requires browser)
python tools/visual-design-checker-real.py index.html

# Test cross-browser (requires browsers)
python tools/complete-cross-browser-tester.py index.html

# Test speed (requires live server)
python tools/speed-checker.py https://yourdomain.com

================================================================================
AUTO-FIX COMMANDS
================================================================================

# Auto-fix all pages (data consistency)
python tools/auto-improve-pages.py

# This will fix:
# - Years in business inconsistencies
# - Service hours variations
# - Phone number formats
# - Warranty period mismatches
# - Review count discrepancies
# - Rating inconsistencies

================================================================================
PAGE GENERATION COMMANDS
================================================================================

# Generate all service and location pages from index.html
python tools/generate-all-pages-from-main.py

# Generate all 20 blog posts
python tools/generate-blog-posts.py

# These scripts will:
# - Clone complete index.html design
# - Replace dynamic content
# - Add proper SEO meta tags
# - Include schema markup
# - Create consistent structure

================================================================================
VIEW RESULTS
================================================================================

# Open dashboard in browser
start bmad-dashboard.html
# or
open bmad-dashboard.html  (Mac)

# View latest test results
notepad bmad_mass_test_*.json
# or use any JSON viewer

# Read comprehensive report
notepad FINAL-BMAD-TEST-RESULTS.md

# Quick view summary
type TEST-SUMMARY-QUICK-VIEW.txt
# or
cat TEST-SUMMARY-QUICK-VIEW.txt  (Mac/Linux)

================================================================================
FILE LOCATIONS
================================================================================

PAGES:
  Main:          index.html
  Services:      services/*.html (11 files)
  Locations:     locations/*.html (30 files)
  Blog:          blog/*.html (20 files)

TOOLS:
  All tools:     tools/*.py (10 files)

REPORTS:
  Detailed:      FINAL-BMAD-TEST-RESULTS.md
  Summary:       PROJECT-COMPLETION-SUMMARY.md
  Quick View:    TEST-SUMMARY-QUICK-VIEW.txt
  Work Summary:  COMPLETE-WORK-SUMMARY.md

TEST DATA:
  JSON results:  bmad_mass_test_*.json

DASHBOARD:
  Monitoring:    bmad-dashboard.html

================================================================================
COMMON WORKFLOWS
================================================================================

WORKFLOW 1: Full Site Test
---------------------------
1. cd C:\NikaApplianceRepair
2. python tools/mass-test-all-pages.py
3. Review results in bmad_mass_test_*.json
4. Open bmad-dashboard.html to view scores

WORKFLOW 2: Fix and Retest
---------------------------
1. python tools/auto-improve-pages.py
2. python tools/mass-test-all-pages.py
3. Compare new scores with previous results

WORKFLOW 3: Add New Page
-------------------------
1. Edit tools/generate-all-pages-from-main.py
2. Add new page to LOCATIONS or SERVICES list
3. Run: python tools/generate-all-pages-from-main.py
4. Test: python tools/seo-checker.py new-page.html

WORKFLOW 4: Check Single Page
------------------------------
1. python tools/seo-checker.py your-page.html
2. python tools/data-consistency-checker.py your-page.html
3. Fix any issues found
4. Retest

================================================================================
UNDERSTANDING TEST SCORES
================================================================================

SEO SCORE:
  85-100:  Excellent (target score)
  70-84:   Good (needs minor improvements)
  50-69:   Fair (needs optimization)
  0-49:    Poor (needs major work)

DATA CONSISTENCY:
  PASS:    All data matches across the page
  FAIL:    Inconsistencies found (must fix)

CURRENT STATUS (as of Oct 2, 2025):
  Average SEO Score:     50.2/100 (Fair - needs optimization)
  Data Consistency:      100% PASS (Excellent)
  Pages Tested:          62/62
  Pages Passing:         0 (need to reach 85+)

================================================================================
BMAD PARAMETERS (277 Total)
================================================================================

TESTED (45/277 - 16%):
  [OK] SEO Optimization        30/30
  [OK] Data Consistency        15/15

PENDING (232/277 - 84%):
  [ ] Responsive Design        0/80   (needs live server)
  [ ] Visual Design            0/30   (needs browser)
  [ ] Cross-Browser            0/28   (needs browsers)
  [ ] Speed Performance        0/9    (needs live server)
  [ ] Accessibility            0/15   (manual check)
  [ ] User Experience          0/70   (needs testing)

================================================================================
OPTIMIZATION PRIORITIES
================================================================================

PRIORITY 1 (High Impact):
  1. Add 3-5 images per page                 (+10-15 SEO points)
  2. Expand blog posts to 2000+ words        (+15-20 SEO points)
  3. Add featured snippet sections           (+5-10 SEO points)
  4. Reduce keyword density (2-3%)           (+3-5 SEO points)

PRIORITY 2 (Medium Impact):
  5. Add more content to service pages       (+5-10 SEO points)
  6. Add more internal links                 (+3-5 SEO points)
  7. Optimize schema markup                  (+5-8 SEO points)
  8. Add video content                       (+5-10 SEO points)

PRIORITY 3 (Requires Server):
  9. Test responsive design
  10. Test page speed
  11. Test cross-browser compatibility
  12. Test accessibility

================================================================================
TROUBLESHOOTING
================================================================================

ERROR: "Module not found"
SOLUTION: pip install beautifulsoup4 lxml playwright

ERROR: "File not found"
SOLUTION: Make sure you're in C:\NikaApplianceRepair directory

ERROR: "Timeout exceeded"
SOLUTION: This is normal for responsive tests without live server

ERROR: "Encoding error"
SOLUTION: Already fixed - use text output instead of symbols

ERROR: "Review count mismatch"
SOLUTION: Already fixed - regex now handles commas in "5,200"

================================================================================
TIPS & BEST PRACTICES
================================================================================

1. Always test after making changes
   python tools/mass-test-all-pages.py

2. Use auto-improve before manual fixes
   python tools/auto-improve-pages.py

3. Test single page first before batch testing
   python tools/seo-checker.py test-page.html

4. Keep index.html as master template
   All other pages clone from it

5. Monitor dashboard regularly
   open bmad-dashboard.html

6. Check data consistency first
   It's easiest to fix and should always be 100%

7. Save test results for comparison
   bmad_mass_test_*.json files contain historical data

8. Read the reports
   FINAL-BMAD-TEST-RESULTS.md has detailed recommendations

================================================================================
QUICK STATUS CHECK
================================================================================

# Count all pages
dir /b *.html | find /c ".html"
dir /b services\*.html | find /c ".html"
dir /b locations\*.html | find /c ".html"
dir /b blog\*.html | find /c ".html"

# Check if all tools exist
dir /b tools\*.py

# View latest test summary
python -c "import json; d=json.load(open(max([f for f in os.listdir('.') if f.startswith('bmad_mass_test')], key=os.path.getctime))); print(f'Pages: {d[\"pages_tested\"]}, SEO Avg: {sum(p[\"seo_score\"] for p in d[\"details\"].values())/len(d[\"details\"]):.1f}, Data: {sum(1 for p in d[\"details\"].values() if p[\"data_consistency\"]==\"PASS\")}/{len(d[\"details\"])} PASS')"

================================================================================
CONTACT & SUPPORT
================================================================================

Project Documentation:
  - FINAL-BMAD-TEST-RESULTS.md (comprehensive analysis)
  - PROJECT-COMPLETION-SUMMARY.md (what was done)
  - TEST-SUMMARY-QUICK-VIEW.txt (quick reference)
  - COMPLETE-WORK-SUMMARY.md (detailed work log)

Test Results:
  - bmad_mass_test_*.json (raw data)
  - bmad-dashboard.html (visual interface)

Tools Location:
  C:\NikaApplianceRepair\tools\

All tools tested and working as of October 2, 2025

================================================================================
NEXT STEPS
================================================================================

IMMEDIATE:
  1. Review FINAL-BMAD-TEST-RESULTS.md
  2. Implement Priority 1 optimizations
  3. Retest with: python tools/mass-test-all-pages.py
  4. Monitor scores on bmad-dashboard.html

WHEN READY:
  5. Deploy to staging server
  6. Run live server tests
  7. Add real images
  8. Final QA before production

GOAL:
  - Get 45-50 pages to 85+ score
  - Maintain 100% data consistency
  - Deploy to production

================================================================================
Generated: October 2, 2025
Project: Nika Appliance Repair
Framework: BMAD (277 Parameters)
Status: Phase 1 Complete
================================================================================
